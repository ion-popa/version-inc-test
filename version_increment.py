import re
import datetime
import os



file_path = "include/version.h"
file_template = '''
/* AUTO GENERATED FILE, DO NOT EDIT THIS FILE */
#ifndef VERSION_H_
#define VERSION_H_

/**
 * Major version definition. Incremented manually.
 */
#define MAJOR_VERSION 		{}

/**
 * Minor version definition. Incremented manually.
 */
#define MINOR_VERSION 		{}

/**
 * Build version definition. Incremented automatically at rebuild.
 */
#define BUILD_VERSION		{}

/**
 * Software version in string format. Build automatically at rebuild.
 */
#define VERSION_STRING	"{}"

/**
 * Build timestamp definition. Set automatically at rebuild.
 */
#define BUILD_TIMESTAMP		"{}"

#endif /* VERSION_H_ */
'''
ver_major = 1
ver_minor = 0
ver_build = 0

if os.path.isfile(file_path):
    with open(file_path, "r") as file:
        file_content = file.read()
        ver_major = int(re.search(r"MAJOR_VERSION\s*(\d+)", file_content).group(1))
        ver_minor = int(re.search(r"MINOR_VERSION\s*(\d+)", file_content).group(1))
        ver_build = int(re.search(r"BUILD_VERSION\s*(\d+)", file_content).group(1))

ver_build += 1
build_timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
ver_string = str(ver_major) + '.' + str(ver_minor) + '.' + str(ver_build)

file_content = file_template.format(ver_major, ver_minor, ver_build, ver_string, build_timestamp)

with open(file_path, "w") as file:
    file.write(file_content)

print("Version String:", ver_string)
print("Major Version:", ver_major)
print("Minor Version:", ver_minor)
print("Build Version:", ver_build)
print("Build timestamp:", build_timestamp)
